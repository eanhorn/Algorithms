/*******************************************************************************
 * Name        : sieve.cpp
 * Author      : Erik Anhorn
 * Date        : September 9, 2021
 * Description : Sieve of Eratosthenes
 * Pledge      : I pledge my honor that I have abided by the Stevens Honor System.
 ******************************************************************************/
#include <cmath>
#include <iomanip>
#include <iostream>
#include <sstream>

using namespace std;

class PrimesSieve {
public:
    PrimesSieve(int limit);

    ~PrimesSieve() {
        delete [] is_prime_;
    }

    int num_primes() const {
        return num_primes_;
    }
    void display_primes() const;

private:
    // Instance variables
    bool * const is_prime_;
    const int limit_;
    int num_primes_, max_prime_;

    // Method declarations
    int count_num_primes() const;
    void set_num_primes(int num);
    void set_max_prime(int num);
    void sieve();
    static int num_digits(int num);
};

PrimesSieve::PrimesSieve(int limit) :is_prime_{new bool[limit + 1]}, limit_{limit} {
    sieve();
}

void set_num_primes(int num){
    	num_primes_ = num;
}
void set_max_prime(int num){
    	max_prime_ = num;
}

void PrimesSieve::display_primes() const {
    const int max_prime_width = num_digits(max_prime_), primes_per_row = 80/(max_prime_width+1);		//Starts at 2 since 2 is the first prime num, outputs spaces for the difference
    int n = 1;
    for(int m=2;m<=limit_;m++){
    	if(n>primes_per_row){
    		cout << endl;
    		n = 1;
    	}
    	cout << setw(3) << is_prime_[m] << " ";
    	n++;
    }
//    for(int m=2;m<=limit_;m++){																			//between the current number of digits and the maximum number of digits, then
//		if(is_prime_[m]){																				//prints the number and an extra space after it and moves on to the next number.
//			for(int n = num_digits(is_prime_[m]);n<max_prime_width;n++){
//				cout << " ";
//			}
//			cout << is_prime_[m] << " ";
//		}
//	}
}

int PrimesSieve::count_num_primes() const {																//Finds the max prime number while counting the prime numbers
	int numOfPrimes=0;
	int lastPrime;
	for(int i=0; i<=limit_;i++){
		if(is_prime_[i]){
			numOfPrimes++;
			lastPrime = i;
		}
	}
	int maxPrime = is_prime_[lastPrime];
	set_max_prime(maxPrime);
	set_num_primes(numOfPrimes);
    return numOfPrimes;
}

void PrimesSieve::sieve() {																				//Uses the given algorithm for sieve.
    for(int i=0;i<=sqrt(limit_); i++){
    	if(is_prime_[i]){
    		for(int j=i^2;j<=limit_;j+=i){
    			is_prime_[j] = false;
    		}
    	}
    }
}

int PrimesSieve::num_digits(int num) {
    int numDigits = 1;																					//Divides by 10 until there is no remainder, no remainder means
    while(num/10 !=0){																					//you have gotten to the ones place
    	num = num/10;
    	numDigits ++;
    }
    return numDigits;
}

int main() {
    cout << "**************************** " <<  "Sieve of Eratosthenes" <<
            " ****************************" << endl;
    cout << "Search for primes up to: ";
    string limit_str;
    cin >> limit_str;
    int limit;

    // Use stringstream for conversion. Don't forget to #include <sstream>
    istringstream iss(limit_str);

    // Check for error.
    if ( !(iss >> limit) ) {
        cerr << "Error: Input is not an integer." << endl;
        return 1;
    }
    if (limit < 2) {
        cerr << "Error: Input must be an integer >= 2." << endl;
        return 1;
    }
    // TODO: write code that uses your class to produce the desired output.
    PrimesSieve primeNums = PrimesSieve(limit);
    cout << endl;
    cout << "Number of primes found: "<< primeNums.count_num_primes() << endl;
    cout << "Primes up to " << limit << ":" << endl;
    primeNums.display_primes();
    return 0;
}
